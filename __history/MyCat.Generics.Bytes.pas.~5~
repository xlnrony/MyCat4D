unit MyCat.Generics.Bytes;

interface

uses
  System.SysUtils;

{$I DGLCfg.inc_h}

const
  _NULL_Value: TBytes = [];

type
  _ValueType = TBytes;

function _HashValue(const Key: _ValueType): Cardinal;
{$IFDEF _DGL_Inline} inline; {$ENDIF}// Hash函数
{$DEFINE _DGL_Compare}  // 比较函数
function _IsEqual(const a, b: _ValueType): boolean; {$IFDEF _DGL_Inline} inline;
{$ENDIF} // result:=(a=b);
function _IsLess(const a, b: _ValueType): boolean; {$IFDEF _DGL_Inline} inline;
{$ENDIF} // result:=(a<b); 默认排序准则

{$I DGL.inc_h}

type
  TBytesAlgorithms = _TAlgorithms;

  IBytesIterator = _IIterator;
  IBytesContainer = _IContainer;
  IBytesSerialContainer = _ISerialContainer;
  IBytesVector = _IVector;
  IBytesList = _IList;
  IBytesDeque = _IDeque;
  IBytesStack = _IStack;
  IBytesQueue = _IQueue;
  IBytesPriorityQueue = _IPriorityQueue;

  TBytesVector = _TVector;
  TBytesDeque = _TDeque;
  TBytesList = _TList;
  IBytesVectorIterator = _IVectorIterator; // 速度比_IIterator稍快一点:)
  IBytesDequeIterator = _IDequeIterator; // 速度比_IIterator稍快一点:)
  IBytesListIterator = _IListIterator; // 速度比_IIterator稍快一点:)
  TBytesStack = _TStack;
  TBytesQueue = _TQueue;
  TBytesPriorityQueue = _TPriorityQueue;

  //

  IBytesMapIterator = _IMapIterator;
  IBytesMap = _IMap;
  IBytesMultiMap = _IMultiMap;

  TBytesSet = _TSet;
  TBytesMultiSet = _TMultiSet;
  TBytesMap = _TMap;
  TBytesMultiMap = _TMultiMap;
  TBytesHashSet = _THashSet;
  TBytesHashMultiSet = _THashMultiSet;
  TBytesHashMap = _THashMap;
  TBytesHashMultiMap = _THashMultiMap;

implementation

uses
  HashFunctions;

function _HashValue(const Key: _ValueType): Cardinal; overload;
begin
  Result := HashValue_Data(@Key[0], Length(Key));
end;

function memcmp(buf1, buf2: pbyte; count: integer): integer;
begin
  if count = 0 then
    result := 0
  else
  begin
    dec(count);
    while (count > 0) and (buf1^ = buf2^) do
    begin
      inc(buf1);
      inc(buf2);
      dec(count);
    end;
    result := buf1^ - buf2^;
  end;
end;

function _IsEqual(const a, b: _ValueType): boolean; // result:=(a=b);
begin

  Result := memcmp(@a[0],@b[0],);
  // IsEqual_StrCaseInsensitive(a, b);
end;



function _IsLess(const a, b: _ValueType): boolean; // result:=(a<b); 默认排序准则
begin
  Result := a < b;
end;

{$I DGL.inc_pas}

end.
