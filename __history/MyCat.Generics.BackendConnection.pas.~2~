unit MyCat.Generics.BackendConnection;

interface

uses
  System.SysUtils, MyCat.Net.CrossSocket.Base;

{$I DGLCfg.inc_h}

type
  _ValueType = ICrossConnection;

const
  _NULL_Value: _ValueType = nil;
{$DEFINE _DGL_NotHashFunction}
{$DEFINE  _DGL_Compare}
function _IsEqual(const a, b: _ValueType): boolean;
// {$ifdef _DGL_Inline} inline; {$endif} //result:=(a=b);
function _IsLess(const a, b: _ValueType): boolean; {$IFDEF _DGL_Inline} inline;
{$ENDIF}  // result:=(a<b); 默认排序准则

{$I DGL.inc_h}

type
  TCrossConnectionAlgorithms = _TAlgorithms;

  ICrossConnectionIterator = _IIterator;
  ICrossConnectionContainer = _IContainer;
  ICrossConnectionSerialContainer = _ISerialContainer;
  ICrossConnectionVector = _IVector;
  ICrossConnectionList = _IList;
  ICrossConnectionDeque = _IDeque;
  ICrossConnectionStack = _IStack;
  ICrossConnectionQueue = _IQueue;
  ICrossConnectionPriorityQueue = _IPriorityQueue;
  ICrossConnectionSet = _ISet;
  ICrossConnectionMultiSet = _IMultiSet;

  TCrossConnectionVector = _TVector;
  TCrossConnectionDeque = _TDeque;
  TCrossConnectionList = _TList;
  ICrossConnectionVectorIterator = _IVectorIterator; // 速度比_IIterator稍快一点:)
  ICrossConnectionDequeIterator = _IDequeIterator; // 速度比_IIterator稍快一点:)
  ICrossConnectionListIterator = _IListIterator; // 速度比_IIterator稍快一点:)
  TCrossConnectionStack = _TStack;
  TCrossConnectionQueue = _TQueue;
  TCrossConnectionPriorityQueue = _TPriorityQueue;

  ICrossConnectionMapIterator = _IMapIterator;
  ICrossConnectionMap = _IMap;
  ICrossConnectionMultiMap = _IMultiMap;

  TCrossConnectionSet = _TSet;
  TCrossConnectionMultiSet = _TMultiSet;
  TCrossConnectionMap = _TMap;
  TCrossConnectionMultiMap = _TMultiMap;
  TCrossConnectionHashSet = _THashSet;
  TCrossConnectionHashMultiSet = _THashMultiSet;
  TCrossConnectionHashMap = _THashMap;
  TCrossConnectionHashMultiMap = _THashMultiMap;

implementation

uses
  HashFunctions;

function _IsEqual(const a, b: _ValueType): boolean;
begin
  result := (a = b);
end;

function _IsLess(const a, b: _ValueType): boolean;
begin
  result := (Cardinal(a) < Cardinal(b));
end;

{$I DGL.inc_pas}

end.
